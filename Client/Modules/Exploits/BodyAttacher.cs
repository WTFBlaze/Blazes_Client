using Blaze.API.QM;
using Blaze.Utils.VRChat;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnhollowerRuntimeLib;
using UnityEngine;

namespace Blaze.Modules
{
    class BodyAttacher : BModule
    {
        private QMNestedButton Menu;

        public override void Start()
        {
            ClassInjector.RegisterTypeInIl2Cpp<BlazesBodyAttacher>();
        }

        public override void QuickMenuUI()
        {
            Menu = new QMNestedButton(BlazeMenu.Exploits2, "Body\nAttacher", 3, 0, "Attach yourself to your targets body parts", "Body Attacher");

            new QMToggleButton(Menu, 1, 0, "Body Attacher", delegate
            {
                BlazeInfo.BlazesComponents.AddComponent<BlazesBodyAttacher>();
                PlayerUtils.CurrentUser().gameObject.GetComponent<CharacterController>().enabled = false;
            },
            delegate
            {
                if (!Flight.FlightState)
                {
                    PlayerUtils.CurrentUser().gameObject.GetComponent<CharacterController>().enabled = true;
                }
                UnityEngine.Object.Destroy(BlazeInfo.BlazesComponents.GetComponent<BlazesBodyAttacher>());
            }, "Enables attaching yourself to your targets body");

            new QMSingleButton(Menu, 2, 0, "Reset", delegate
            {
                BlazeInfo.BlazesComponents.GetComponent<BlazesBodyAttacher>().Reset();
            }, "Resets what bone you are attached to on the target");

            new QMSingleButton(Menu, 3, 0, "To Head", delegate
            {
                BlazeInfo.BlazesComponents.GetComponent<BlazesBodyAttacher>().SetAttachment(BlazeInfo.Target._vrcplayer, HumanBodyBones.Head);
            }, "Attach to your targets Head");

            new QMSingleButton(Menu, 4, 0, "To Right Hand", delegate
            {
                BlazeInfo.BlazesComponents.GetComponent<BlazesBodyAttacher>().SetAttachment(BlazeInfo.Target._vrcplayer, HumanBodyBones.RightHand);
            }, "Attach to your targets Right Hand");

            new QMSingleButton(Menu, 1, 1, "To Left Hand", delegate
            {
                BlazeInfo.BlazesComponents.GetComponent<BlazesBodyAttacher>().SetAttachment(BlazeInfo.Target._vrcplayer, HumanBodyBones.LeftHand);
            }, "Attach to your targets Left Hand");

            new QMSingleButton(Menu, 2, 1, "To Right Foot", delegate
            {
                BlazeInfo.BlazesComponents.GetComponent<BlazesBodyAttacher>().SetAttachment(BlazeInfo.Target._vrcplayer, HumanBodyBones.RightFoot);
            }, "Attach to your targets Right Foot");

            new QMSingleButton(Menu, 3, 1, "To Left Foot", delegate
            {
                BlazeInfo.BlazesComponents.GetComponent<BlazesBodyAttacher>().SetAttachment(BlazeInfo.Target._vrcplayer, HumanBodyBones.LeftFoot);
            }, "Attach to your targets Left Foot");
        }
    }

    public class BlazesBodyAttacher : MonoBehaviour
    {
        public BlazesBodyAttacher(IntPtr id) : base(id) { }
        private static Transform TransformParent;

        public void OnDestroy()
        {
            if (!Flight.FlightState)
            {
                PlayerUtils.CurrentUser().gameObject.GetComponent<CharacterController>().enabled = true;
            }
        }

        public void Update()
        {
            try
            {
                if (!WorldUtils.IsInRoom() || TransformParent == null) return;
                PlayerUtils.CurrentUser().transform.position = TransformParent.position;
            }
            catch {}
        }

        public void SetAttachment(Transform Instance)
        {
            TransformParent = Instance;
        }
        public void SetAttachment(VRCPlayer Instance)
        {
            TransformParent = Instance.gameObject.transform;
        }

        public void SetAttachment(VRCPlayer Instance, HumanBodyBones bone)
        {
            TransformParent = Instance.gameObject.transform.GetComponentInChildren<Animator>().GetBoneTransform(bone);
        }

        public void Reset()
        {
            TransformParent = null;
        }
    }
}
